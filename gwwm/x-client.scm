(define-module (gwwm x-client)
  #:autoload (gwwm) (fullscreen-layer float-layer tile-layer overlay-layer top-layer bottom-layer background-layer  gwwm-seat arrangelayers)
  #:autoload (gwwm commands) (arrange)
  #:autoload (gwwm config) (gwwm-borderpx g-config)
  #:duplicates (merge-generics replace warn-override-core warn last)
  #:use-module (srfi srfi-1)
  #:use-module (srfi srfi-2)
  #:use-module (srfi srfi-26)
  #:use-module (srfi srfi-71)
  #:use-module (srfi srfi-189)
  #:use-module (gwwm utils srfi-215)
  #:use-module (wlroots types scene)
  #:use-module (wlroots types compositor)
  #:use-module (wlroots types subcompositor)
  #:use-module (wlroots types layer-shell)
  #:use-module (wlroots time)
  #:use-module (ice-9 q)
  #:use-module (ice-9 control)
  #:use-module (ice-9 format)
  #:use-module (gwwm utils)
  #:use-module (util572 color)
  #:use-module (wlroots xwayland)
  #:use-module (gwwm monitor)
  #:use-module (gwwm hooks)
  #:use-module (wayland listener)
  #:use-module (wayland list)
  #:use-module (wlroots types seat)
  #:use-module (wlroots util box)
  #:use-module (util572 box)
  #:use-module (wlroots types xdg-shell)
  #:use-module (wlroots types cursor)
  #:use-module (gwwm listener)
  #:use-module (gwwm i18n)
  #:use-module (gwwm client)
  #:use-module (oop goops)
  #:use-module (oop goops describe)

  #:export (<gwwm-x-client>
            client-is-x11?))
(define-class <gwwm-x-client> (<gwwm-client>))
(define-method (client-mapped? (c <gwwm-x-client>))
  (wlr-xwayland-surface-mapped? (client-super-surface c)))
(define-method (client-wants-fullscreen? (c <gwwm-x-client>))
  (.fullscreen (client-super-surface c)))
(define-method (client-do-set-fullscreen (c <gwwm-x-client>) fullscreen?)
  (next-method)
  (wlr-xwayland-surface-set-fullscreen (client-super-surface c)
                                       fullscreen?))
(define-method (client-get-parent (c <gwwm-x-client>))
  (and=> (.parent (client-super-surface c))
         (lambda (x) (client-from-wlr-surface (.surface x)))))
(define-method (client-get-appid (c <gwwm-x-client>))
  (or (and=> (client-super-surface c)
             wlr-xwayland-surface-class)
      "*unknow*"))
(define-method (client-get-title (c <gwwm-x-client>))
  (wlr-xwayland-surface-title
   (client-super-surface c)))
(define-method (client-send-close (c <gwwm-x-client>))
  (wlr-xwayland-surface-close (client-super-surface c)))
(define (client-is-x11? client)
  (is-a? client <gwwm-x-client>))
(define-method (client-is-unmanaged? (client <gwwm-x-client>))
  (wlr-xwayland-surface-override-redirect (client-super-surface client)))
(define-method (client-set-resizing! (c <gwwm-x-client>) resizing?)
  *unspecified*)
(define-method (client-get-size-hints (c <gwwm-x-client>))
  (%get-size-hints-helper (.size-hints (client-super-surface c))))
(define-method (client-restack-surface (c <gwwm-x-client>))
  (wlr-xwayland-surface-restack (client-super-surface c) #f 0))
(define-method (client-set-tiled (c <gwwm-x-client>) edges)
  *unspecified*)
(define-method (client-get-geometry (c <gwwm-x-client>))
  (let ((s (client-super-surface c)))
    (make-wlr-box (wlr-xwayland-surface-x s)
                  (wlr-xwayland-surface-y s)
                  (wlr-xwayland-surface-width s)
                  (wlr-xwayland-surface-height s))))
(define-method (client-set-size! (c <gwwm-x-client>) width height)
  (wlr-xwayland-surface-configure (client-super-surface c)
                                  (box-x (client-geom c))
                                  (box-y (client-geom c))
                                  width height)
  0)

(define-method (client-request-fullscreen-notify (c <gwwm-x-client>))
  (lambda (listener data)
    (send-log DEBUG "client request fullscreen" 'client c)
    (let ((fullscreen? (client-wants-fullscreen? c))
          (xsurface (wrap-wlr-xwayland-surface data)))
      (if (client-monitor c)
          (client-do-set-fullscreen c fullscreen?)
          (set! (client-fullscreen? c) fullscreen?))
      (run-hook fullscreen-event-hook c xsurface))))
